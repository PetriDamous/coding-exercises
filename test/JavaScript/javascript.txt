


1. The following function never prints "bar" to the console, despite what is passed into the function. Why?

function foo(x) {
  if (x = undefined) {
    console.log('foo');
  } else if (x == false) {
    console.log('bar');
  } else {
    console.log('baz');
  }
}

A. The first condition expression handles everything that the second would.

B. The second condition expression overwrites x.

C. The first condition expression overwrites x.

D. x can never be false because it is a function argument.

Correct answer: C 

2. What is one benefit of using Symbol() for unique identifiers?

A. It is public and a third party can edit it.

B. Symbols always have the same values.

C. It is hidden and you can keep it private for internal use.

D. Symbols are enumerated and you can use them in for..of or for..in loops.

Correct answer: C 

3. What is the intent of the following code snippet?

function Person(name) {   
   if (!(this instanceof Person)) {    
     return new Person(name);   
   }     
   this.name = name;
}

A. To ensure that the function never returns undefined if the function is called with missing arguments

B. To inherit from the class Person defined elsewhere

C. To protect all methods of the custom object as private

D. To ensure that instances of class Person are always constructed using the new keyword

Correct answer: D 

4. What is the correct format for creating a closure?

A. function square(n) { 
     function displayNumber() { 
        alert(n);
     }
     displayNumber();
   }

   square(2);

B. function square(n) { 
    alert(n);
   }

   square().toClosure();

C. function square(n) { 
    alert(n);
   }

   square(2);

D. function square(n) { 
    alert(n);
   }

   square.toClosure();

Correct answer: A 

5. Which statement about using files with JavaScript is true? 

A. JavaScript cannot access a database file if there is any Ajax code in the file.

B. JavaScript cannot directly write to files on the client. 

C. JavaScript cannot send requests to the server if there is any Ajax code in the file. 

D. JavaScript can directly read from files on the client. 

Correct answer: B 

6. What does the following code snippet print to the console?

let foo = () => {
    console.log("User1");
    return false;
}

let bar = () => {
    console.log("User2");
    return true;
}

let x = false || bar() || foo();

A. User2

B. undefined

C. User2
   User1

D. User1
   User2

Correct answer: A 

7. When comparing two strings with the less than or the greater than operator, what does the `console.log` output return?

var a = 'a';
var b = 'b';
console.log(a < b);

A. true

B. false

C. Error

D. NaN

Correct answer: A 

8. The following code runs successfully, but the variable y returns as undefined. How can you change this code so that an error outputs to the console instead?

x = 50;

document.write("x is " + x + " and y is " + y);

var y = 70;
var x;

A. Include "use strict"; before the first line

B. Remove the var y = 7; line of code.

C. Declare the x variable with the let keyword. 

D. Declare the y variable as const. 

Correct answer: A 

9. What is the difference between a property and a method on a class?

A. Properties and methods are indistinguishable in the ES6 class spec; properties can be methods and methods can be properties.

B. A property does not have access to the this object; a method creates a scope with access to the parent's this object and is more suited for calculated virtual properties.

C. A property is an association between a name and a value; a method is when a function is the value of a property.

D. A property is only declarable on objects, not classes; a method is declarable only on classes, not objects.

Correct answer: C 

10. How could you make the following instance into an object literal?

const foo = function(name) {
  this.name = name;
  this.greet = (greeting) => `${greeting}, ${this.name}`;
}

A. const foo = {
     name: "User1",
     _greet: (greeting) => `${greeting}, ${name}`,
   }

B. const foo = {};
   foo.greet = (greeting) => `${greeting}, ${name}`;

C. const foo = {
     name: "User1",
     greet: (greeting, name) => `${greeting}, ${name}`, 
   }

D. const foo = {"User1"};
   foo.greet = (greeting) => `${greeting}, ${name}`;

Correct answer: C 

11. What prints to the console with the final line of the following code snippet?

let foo = 5;
function addTwo(foo) {  
  return foo + 2;
}

addTwo(foo);
console.log(foo);

A. 7

B. 5 

C. 12

D. Reference Error 

Correct Answer: B 

12. Which code snippet correctly shows how to access an object foo's property bar using object destructuring?

A. foo['bar']

B. const { bar } = foo

C. foo.bar

D. const bar = () => foo.bar;

Correct answer: B 

13. A variable-size, dynamic array, numbers, contains a series of integers. Using Math.max(), which code snippet finds the largest number in the array?

A. Math.max.call(Math, numbers);

B. for(let i = 0; i < numbers.length; i++){
     Math.max(numbers[i]);
   }

C. Math.max(...numbers);

D. Math.max(numbers);

Correct answer: C 

14. While writing a JavaScript application, you declare the following variable. You want to check the initial value to determine if it is truthy or falsy. How could you do this?

let val = NaN;

A. Val(val);

B. !!val

C. typeof(val)

D. String(val);

Correct answer: B 

15. An iterator never returns {done: true}. What is the result?

A. The iterator runs infinitely.

B. The iterator always returns the value false.

C. The iterator always yields the same value for all calls made to .next(). 

D. The iterator only runs for the initial step when .next() is called first

Correct answer: A 

16. What is the value of bar in the following code snippet?

let foo = "Foo";
let bar = [...foo];

A. SyntaxError

B. [ ]

C. ["Foo"] 

D. ["F", "o", "o"]

Correct answer: D 

17. You create the following function which returns a promise: 

function func1() {
  return Promise.resolve("Hello world!");
}

How can you rewrite this method to accomplish the same thing and return a promise? 

A. function async func1() {
     return "Hello world";
   }

B. promise function func1() {
     return "Hello world";
   }

C. await function func1() {
     async return "Hello world";
   }

D. async function func1() {
     return "Hello world";
   }

Correct answer: D 

18. Consider the following object foo:

const foo = {
  _a: 'Rocket',
  !_a: 'Fuel'
};

console.log(foo['!_a'])

When you try to access the value of !_a using the code foo['!_a'], you receive an unexpected token error. What changes can you make to retrieve its value, 'Fuel'?

A. Remove quotes from !_a while calling the object.

B. Add !_a inside quotes in the object definition.

C. Replace ! with # in both the object definition and its call.

D. Replace ! with 9 in both the object definition and its call.

Correct answer: B

19. Which snippet returns the following result?

console.log(foo.show()); // ["hello world", "hello world"]

A. var foo = {
     title: 'world',
     show() {
        return ['', ''].map(function(a) { 
            return 'hello ' + this.title
        });
     }
   };

B. var foo = {
     title: 'world',
     show() {
        return ['', ''].map(function(a) => 'hello ' + this.title);
     }
   };

C. var foo = {
     title: 'world',
     show() {
        return ['', ''].map(() => 'hello ' + this.title);
     }
   };

D. var foo = {
     title: 'world',
     show() {
        return ['', ''].map(function(a) { this.title });
     }
   };

Correct answer: C

20. What keyword does a generator use to send a generated value to the caller?

A. return 

B. yield 

C. gen 

D. send 

Correct answer: B  

